{
  "title": "AWS Step Functionsの学習",
  "closed": false,
  "archived": false,
  "created_at": "2023-09-24",
  "comments": [
    {
      "author": "kat",
      "created_at": "2023-09-24",
      "body_markdown": "AWSのデベロッパーガイドを見ながら使い方を覚えていきます。\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/welcome.html\n\nLambda自体は触ったことあるので、ざっくり雰囲気を掴むため、チュートリアルを先にやってみます。\n\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/tutorials.html\n\n- Lambda を使用するStep Functions ステートマシンを作成する\n- ステートマシンを使用してエラー条件を処理する\n- インラインマップステートを使用してアクションを繰り返す\nまず、上から３つまでやってみました。\n翻訳の妙なのか、設定する箇所がわかりにくい部分もありつつも、基本的にコピペで動くとこまではいけました。\n\n- 次の式を使用してステートマシンの実行を定期的に開始します。 EventBridge\n​- Amazon S3 イベント発生時にステートマシンの実行をスタートする\nEventBridgeやS3イベント発生についてはLambdaで似たようなことはやったことがあったため、\nイベントで起動するサービスが変わっただけという認識で、さらっと読んで終わり。\n\n- API ゲートウェイを使用してStep Functions API\nAPI GatewayもLambdaと置き換えて考えられそうな雰囲気だったので、さらっと読んで終わり。\n\n- Step Functions ステートマシンの作成しますAWS SAM\nここは実務で使う部分なので、ちゃんとやりました。\nSAMは以前使ったことがあったので、Step Functionsだとどんなコードになるのか、yaml定義まわりをざっくり理解できました。\n\nhttps://zenn.dev/kat/articles/2a230e980284be\n\n- アクティビティステートマシンの作成\nこの辺でベースの知識のなさから意味がわからなくなってきたので、ガイドに戻って知識を吸収せねばと思い至り、トピックでやっていこうと思い立ちました。\n\n",
      "body_updated_at": "2023-09-24"
    },
    {
      "author": "kat",
      "created_at": "2023-09-24",
      "body_markdown": "# AWS Step Functions とは?\n\n公式より\n\n## 概要\n> 分散アプリケーションのための視覚的なワークフロー\n> - Workflow Studio は、複雑なビジネスロジックをドラッグ & ドロップで簡単に表現できるインターフェースで、迅速に構築を開始できます。\n> - 220 以上の AWS サービスにおいて、コードをメンテナンスすることなくワークフローを自動化することができます。\n> - 大規模な並列ワークフローを使用してオンデマンドでデータを処理するためのコードを使用します。\n> - イベント駆動型アーキテクチャのための耐障害ワークフローを可視化し、開発します。\n\nhttps://aws.amazon.com/jp/step-functions/\n\n## 特徴\n> AWS Step Functions は、アプリケーションにサーバーレスオーケストレーションを提供します。オーケストレーションにより、複数のステップに分割されフローロジックが追加されたワークフローを、ステップ間の入力と出力を追跡しながら集中管理できます。\n\nhttps://aws.amazon.com/jp/step-functions/features/\n\n### 視覚的で使いやすいワークフロー設定\nコンソール上で視覚的にワークフローを作成できる環境が用意されています。\nワークフローはLambdaを始めとするAWSのサービスを呼び出したり、フローの分岐や繰り返しなどの制御をドラッグ＆ドロップで作っていけます。\n"
    },
    {
      "author": "kat",
      "created_at": "2023-09-24",
      "body_markdown": "https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/welcome.html\n\n学習用のワークショップがあるみたい。\n一旦ガイドを読み進めてみて、あとで試してみる。\nhttps://catalog.workshops.aws/stepfunctions/ja-JP/introduction\n\n## AWS SDK と最適化された統合\n他のAWSサービスを呼び出したり、他のサービスから呼び出せるよって話。\n[SDK 統合]と[Step Functions の最適化インテグレーション]の2種類あります。\n\nちょっとよくわからなかったのですが、こちらの記事見たら理解できました。\nhttps://dev.classmethod.jp/articles/aws-step-functions-200-aws-sdk-integration/\n\n元々、最適化された統合の方があって他のサービスは直接呼び出せずにいて、そのためにはlambdaを書いてlambdaからサービス呼び出しをする必要があったのが、ステートから直接Arnを指定して呼び出すことができるようになったという理解。\n\nステートマシンをコンソールからGUIベースで作っている分にはあまり困ることはなさそう。\nここで選べないものは統合されていないので、lambdaでAPI呼び出しするなどするものと思っておけば良い感じ。\nIaC的に作るにしても一度コンソール上で仮組みしてそのASLをコピーしてasl.jsonにするのが楽な気がします。\n\nhttps://docs.aws.amazon.com/lambda/latest/dg/API_Operations.html\n\nサポート外のAPIは下記ページに一覧化されている。\n### サポート対象サービスのサポートされていない API アクション\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/supported-services-awssdk.html#unsupported-api-actions-list\n\n## Standard ワークフローと Express ワークフロー\nワークフローには2種類ある。\n- Standard ワークフロー\n  - 各ステップが１回づつ実行される\n  - 実行時間：最大１年間実行できます。\n    - Expressとの比較で見ると、１回の実行で最長1年間ということか？多分タイムアウト1年的な意味\n  - 実行速度：2,000/秒\n  - 毎秒 4,000 の状態遷移レート\n- Express ワークフロー\n  - 各ステップが複数回実行される可能性あり。\n  - 実行時間：最大5分間\n  - 実行速度：100,000/秒\n  - ほぼ無制限の状態遷移レート\n\nストリーミングデータやIoT系の大量なデータを扱うならExpressで、それ以外は標準で良さげ。\n\n差分の詳細については下記\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/concepts-standard-vs-express.html\n\n## ユースケース\n一般的なユースケース\n\n### ユースケース #1: 関数オーケストレーション\n- 順番にlambdaを呼び出していく\n- 前のlambdaの終了を待って、次のlambdaが動く\n\n### ユースケース #2: 分岐\n分岐です。\n\n### ユースケース #3: エラー処理\nエラーが起きた際の制御を指定可能\nRetry：同じステートを再実行\nCatch：エラー時に実行するステートを指定\n\n詳細は以下\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/concepts-error-handling.html\n\n### ユースケース #4: ヒューマンインザループ\n人間による承認操作など別システムの応答など、外部からの応答を待つ\n\n### ユースケース #5: 並列処理\n複数のステートを並列に同時実行\nそれぞれのステートは異なる処理を実行可能\n\n### ユースケース #6: 動的並列処理\nこちらも同時にステートを実行するが、5との違いは同一のステートを並列に動作させ、\n並列に実行されたステートの全ての終了を待って次のステートを実行する。\n\nswitch caseで分けた処理を同時実行するのが5で、\n配列でfor文回して実行する部分を並列化するのが6という印象\n\n## サービス統合\n序盤で色々見た統合の話と思いきや各サービスを呼び出した後、Step Functionsがどのように待つかを示している。\n\n- レスポンス受信（デフォルト）：レスポンスが返ってきたら次のステップへ進む\n- ジョブの実行後：呼び出したサービスの処理が完了したら次のステップへ進む\n- タスクトークン：タスクトークンでサービスを呼び出す。コールバックが返されるまで待つ\n\n統合するサービスによって上記のパターンのどれが使えるかが違う。\nワークフローの種類によっても使えるパターンが違う。\n現状、Expressはレスポンス受信のみ\nコールバックパターンを用いたり、バッチなどジョブの実行まで待ちたい場合に考慮する\n\n## サポートされている リージョン\n基本使えます。\n\n一部対応していないリージョンがある。\n\nちょっと気になって見れるリージョン見てみましたが、デフォルトで選べるリージョン、有効にできるリージョンで、使えないリージョンはなかったです。\n有効にできなかったリージョンが3つほどあったのでそこかもしれません。\n\n"
    },
    {
      "author": "kat",
      "created_at": "2023-09-25",
      "body_markdown": "# 開始方法\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/getting-started-with-sfn.html\n\nこのイメージのステートマシーンを作っていく\n![](https://storage.googleapis.com/zenn-user-upload/4ad3f27a7dfd-20230925.png =300x)\n\n![](https://storage.googleapis.com/zenn-user-upload/38ff8e372ab9-20230925.png =300x)\n\nこちらのチュートリアルの方が、最初にやったチュートリアルより本格的。\nというかStep Functionのガイド読みやすい気がする。\n\nと思った矢先にチュートリアル１の手順が壊滅的にわからないw\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/tutorial-get-started-create-prototype.html\n\n分岐処理を配置した後6番から、どっちに何を作っていくかが伝わらない。\n翻訳のせいかと思い、英語を見ても具体的な指定がないようです。\n開始方法のページにしか完成系のイメージ画像ないので、これを見ていないと完成できる気がしない。\n\n機械的に翻訳かけたからだろうか、ちょいちょいステートのことを`〜〜州`とか`〜〜状態`とか表現してくるのですが、ここでは`都道府県`と訳されている箇所もあり面食らいます。\n\n翻訳が壊滅的だなと感じたら、英語ページをブラウザで翻訳した方が読みやすかったりします。\n\n**日本語ページ**\n> でコンフィギュレーションタブ、用都道府県名、と入力します。Get credit limit。\n\n**英語ページ ブラウザ翻訳**\n> 「構成」タブの「状態名」に「 」と入力しますGet credit limit。\n\n**英語ページ 原文**\n> In the Configuration tab, for State name, enter Get credit limit.\n\n"
    },
    {
      "author": "kat",
      "created_at": "2023-09-25",
      "body_markdown": "チュートリアル１からやれば良いかと思いきやチュートリアル１はある意味概要的な雰囲気でチュートリアル2以降で細かく実装を進めていくっぽい罠でした。\n\nステートマシンの保存をするためには追加したlambdaの呼び出しなど存在しているリソースを指定しないといけないが、チュートリアル１の段階では作っていないため、ステートマシンの作成ができません。\n作成完了しないと当然保存されないので、せっかく作ったステートマシンが記録されません。\n\n一応後からlambda作り始めても大丈夫ではあるのですが、いずれにせよチュートリアル１のページはなくてもよいですね。\n\nチュートリアル2から順番に作っていけばステートマシンを保存出来ます。\n\nテスト実行してみると、DynamoDB参照するところでエラーになりました。\nチュートリアル１を無理やり終わらせた事による弊害なのかわかりませんが、適切な権限が与えられていない雰囲気だったので、ステートマシンのロールにDynamoDBのReadOnly権限（`AmazonDynamoDBReadOnlyAccess`）を付与して無事正常動作しました。\n\n## 入力データ\n```json\n{\n  \"data\": {\n    \"firstname\": \"Jane\",\n    \"lastname\": \"Doe\",\n    \"identity\": {\n      \"email\": \"jdoe@example.com\",\n      \"ssn\": \"123-45-6789\"\n    },\n    \"address\": {\n      \"street\": \"123 Main St\",\n      \"city\": \"Columbus\",\n      \"state\": \"OH\",\n      \"zip\": \"43219\"\n    }\n  }\n}\n```\n\n## 実行結果\n![](https://storage.googleapis.com/zenn-user-upload/17022d2d01b6-20230925.png)\n\n## ASL\n```json\n{\n  \"Comment\": \"A description of my state machine\",\n  \"StartAt\": \"Get credit limit\",\n  \"States\": {\n    \"Get credit limit\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\n      \"OutputPath\": \"$.Payload\",\n      \"Parameters\": {\n        \"Payload.$\": \"$\",\n        \"FunctionName\": \"arn:aws:lambda:ap-northeast-1:123456789012:function:RandomNumberforCredit:$LATEST\"\n      },\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n            \"Lambda.ServiceException\",\n            \"Lambda.AWSLambdaException\",\n            \"Lambda.SdkClientException\",\n            \"Lambda.TooManyRequestsException\"\n          ],\n          \"IntervalSeconds\": 1,\n          \"MaxAttempts\": 3,\n          \"BackoffRate\": 2\n        }\n      ],\n      \"Next\": \"Credit applied >= 5000?\"\n    },\n    \"Credit applied >= 5000?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$\",\n          \"NumericGreaterThanEquals\": 5000,\n          \"Next\": \"Wait for human approval\"\n        },\n        {\n          \"Variable\": \"$\",\n          \"NumericLessThan\": 5000,\n          \"Next\": \"Auto-approve limit\"\n        }\n      ]\n    },\n    \"Wait for human approval\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::sns:publish.waitForTaskToken\",\n      \"Parameters\": {\n        \"TopicArn\": \"arn:aws:sns:ap-northeast-1:123456789012:TaskTokenTopic\",\n        \"Message\": {\n          \"TaskToken.$\": \"$$.Task.Token\"\n        }\n      },\n      \"Next\": \"Credit limit approved\"\n    },\n    \"Credit limit approved\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Verify applicant's identity and address\"\n    },\n    \"Verify applicant's identity and address\": {\n      \"Type\": \"Parallel\",\n      \"Branches\": [\n        {\n          \"StartAt\": \"Verify address\",\n          \"States\": {\n            \"Verify address\": {\n              \"Type\": \"Task\",\n              \"Resource\": \"arn:aws:states:::lambda:invoke\",\n              \"Parameters\": {\n                \"FunctionName\": \"arn:aws:lambda:ap-northeast-1:123456789012:function:check-address:$LATEST\",\n                \"Payload\": {\n                  \"street\": \"123 Any St\",\n                  \"city\": \"Any Town\",\n                  \"state\": \"AT\",\n                  \"zip\": \"01000\"\n                }\n              },\n              \"Retry\": [\n                {\n                  \"ErrorEquals\": [\n                    \"Lambda.ServiceException\",\n                    \"Lambda.AWSLambdaException\",\n                    \"Lambda.SdkClientException\",\n                    \"Lambda.TooManyRequestsException\"\n                  ],\n                  \"IntervalSeconds\": 1,\n                  \"MaxAttempts\": 3,\n                  \"BackoffRate\": 2\n                }\n              ],\n              \"End\": true\n            }\n          }\n        },\n        {\n          \"StartAt\": \"Verify identity\",\n          \"States\": {\n            \"Verify identity\": {\n              \"Type\": \"Task\",\n              \"Resource\": \"arn:aws:states:::lambda:invoke\",\n              \"Parameters\": {\n                \"FunctionName\": \"arn:aws:lambda:ap-northeast-1:123456789012:function:check-identity:$LATEST\",\n                \"Payload\": {\n                  \"email\": \"jdoe@example.com\",\n                  \"ssn\": \"012-00-0000\"\n                }\n              },\n              \"Retry\": [\n                {\n                  \"ErrorEquals\": [\n                    \"Lambda.ServiceException\",\n                    \"Lambda.AWSLambdaException\",\n                    \"Lambda.SdkClientException\",\n                    \"Lambda.TooManyRequestsException\"\n                  ],\n                  \"IntervalSeconds\": 1,\n                  \"MaxAttempts\": 3,\n                  \"BackoffRate\": 2\n                }\n              ],\n              \"End\": true\n            }\n          }\n        }\n      ],\n      \"Next\": \"Get list of credit bureaus\"\n    },\n    \"Get list of credit bureaus\": {\n      \"Type\": \"Task\",\n      \"Parameters\": {\n        \"TableName\": \"GetCreditBureau\"\n      },\n      \"Resource\": \"arn:aws:states:::aws-sdk:dynamodb:scan\",\n      \"Next\": \"Get scores from all credit bureaus\"\n    },\n    \"Get scores from all credit bureaus\": {\n      \"Type\": \"Map\",\n      \"ItemProcessor\": {\n        \"ProcessorConfig\": {\n          \"Mode\": \"INLINE\"\n        },\n        \"StartAt\": \"Get all scores\",\n        \"States\": {\n          \"Get all scores\": {\n            \"Type\": \"Task\",\n            \"Resource\": \"arn:aws:states:::lambda:invoke\",\n            \"OutputPath\": \"$.Payload\",\n            \"Parameters\": {\n              \"FunctionName\": \"arn:aws:lambda:ap-northeast-1:123456789012:function:get-credit-score:$LATEST\"\n            },\n            \"Retry\": [\n              {\n                \"ErrorEquals\": [\n                  \"Lambda.ServiceException\",\n                  \"Lambda.AWSLambdaException\",\n                  \"Lambda.SdkClientException\",\n                  \"Lambda.TooManyRequestsException\"\n                ],\n                \"IntervalSeconds\": 1,\n                \"MaxAttempts\": 3,\n                \"BackoffRate\": 2\n              }\n            ],\n            \"End\": true\n          }\n        }\n      },\n      \"End\": true,\n      \"ItemsPath\": \"$.Items\"\n    },\n    \"Auto-approve limit\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Verify applicant's identity and address\"\n    }\n  }\n}\n```\n",
      "body_updated_at": "2023-09-26"
    },
    {
      "author": "kat",
      "created_at": "2023-09-26",
      "body_markdown": "# 入出力の各種フィルタ\n\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/tutorial-get-started-configure-io.html\n\n必要に応じて入力パラメータや出力形式をフィルタして必要な部分のみにしたり出来る。\n\n## InputPath\n> 入力ペイロード全体のどの部分をタスクの入力として使用するかを選択します。このフィールドを指定すると、Step Functions は最初にこのフィールドを適用します。\n入力に指定するペイロード（json）のどの部分を用いるかを指定。\nルートを`$`としてドット区切りで階層を指定する。\nこのフィルタ使わなくてもルートから指定すれば当然該当の値を参照可能だが、階層が深い場合など、記述が簡潔に出来るので、そういう用途で使うと認識\n\n## パラメータ\n> タスクを呼び出す前に入力がどのように表示されるかを指定します。Parametersこのフィールドを使用すると、AWS のサービス関数などのインテグレーションへの入力として渡されるキーと値のペアのコレクションを作成できます。AWS Lambdaこれらの値は静的にすることも、状態入力またはワークフローコンテキストオブジェクトから動的に選択することもできます。\nやれることは伝わったのだが、どこに記載するのかピンとこず。\nLambda InvokeだとAPIパラメータの部分に書くと良さそう。\n\n以下、検証中（書き換えてもエラーなので、合っているかわからない。。。）\nデザインで、ステートをクリックし、設定にある、APIパラメータの右にでている、`Edit as JSON`トグルをオンにするとlambda定義部分のjsonが表示されます。\n\n![](https://storage.googleapis.com/zenn-user-upload/b3ed93e0bfed-20230927.png)\n\n```json\n{\n  \"Payload.$\": \"$\",\n  \"FunctionName\": \"arn:aws:lambda:~~~:$LATEST\"\n}\n```\n\nこのJSONがASL全体で言うところの、ステートの`Parameters`に当たる部分なので、以下のように追加すると、\n\n```json\n{\n  \"Payload.$\": \"$\",\n  \"FunctionName\": \"arn:aws:lambda:~~~:$LATEST\",\n  \"addressString.$\": \"States.Format('{}. {}, {} - {}', $.street, $.city, $.state, $.zip)\"\n}\n```\nLambdaに本来渡される入力パラメータが`addressString`に置き換わるようなイメージ\nチュートリアルに書いてあるものだけを設定してもlambdaはその引数を受け付けていないため、エラーになる。が$streetなどの値の変換はされてそう。\nエラーログ\n```\nAn error occurred while executing the state 'check-address' (entered at the event id #4). The Parameters '{\"FunctionName\":\"arn:aws:lambda:ap-northeast-1:123456789012:function:HelloFunction:$LATEST\",\"addressString\":\"123 Main St. Columbus, OH - 43219\",\"Payload\":{\"street\":\"123 Main St\",\"city\":\"Columbus\",\"state\":\"OH\",\"zip\":\"43219\"}}' could not be used to start the Task: [The field \"addressString\" is not supported by Step Functions]\n```\n`\"addressString\":\"123 Main St. Columbus, OH - 43219\",`の部分をみると変数はちゃんと解釈されて入力したjsonデータの値を取得できている。\n\n## ResultSelector\n> タスクの出力から何を選択するかを決定します。ResultSelectorこのフィールドを使用すると、ステートの結果を置き換えるキーと値のペアのコレクションを作成して、そのコレクションをに渡すことができます。\nResultSelectorはマップ、パラレル、タスクの種類で使える\n\n出力タブにある`ResultSelector を使用して結果を変換`にチェックを入れれば入力フォームが出るので、そこにjsonを書くことで設定可能\n![](https://storage.googleapis.com/zenn-user-upload/b920b2bf063e-20230927.png)\n\nこちらはチュートリアル通りで正常動作できました。\n![](https://storage.googleapis.com/zenn-user-upload/03c0848b059d-20230927.png)\n\n\n## ResultPath\n> タスクの出力をどこに置くかを決定します。ResultPathを使用して、ステートの出力が入力のコピーなのか、生成される結果なのか、あるいはその両方の組み合わせなのかを判断できます。\n入力で渡された値の全部または一部を出力してくれる。\n\n出力タブにある`ResultPath を使用して元の入力を出力に追加`にチェックを入れれば有効にできます。\n\n設定しても出力結果が変わらず。。検証中\n→ `$`のみだと意味なし\n`$.`に続けて任意の名前を指定することで、そのステートの出力結果に追加されます。\n例えば`$.result`とすると、そのステートの入力パラメータが\"result\"と言うキーの値として出力されます。\n```json\n# 入力データ\n{\n  \"data\": {\n    \"name\": \"Jane\",\n    \"email\": \"jdoe@example.com\"\n  },\n  \"address\": {\n      \"city\": \"Columbus\"\n  }\n}\n```\n\n```json\n# 出力\n{\n  \"results\": {\n    \"data\": {\n      \"name\": \"Jane\",\n      \"email\": \"jdoe@example.com\"\n    },\n    \"address\": {\n      \"city\": \"Columbus\"\n    }\n  }\n}\n```\nとなる。\n\nパスのところでたまたま使われているが、要素が少ないので理解しやすい。\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/amazon-states-language-pass-state.html\n\n\n## OutputPath\n> 次のステートに何を送るかを決定します。を使用するとOutputPath、不要な情報をフィルターで除外し、JSON データのうち、気になる部分だけを渡すことができます。\nInputPathの出力版\n\n出力タブにある`OutputPath で出力をフィルタリング`にチェックを入れれば有効にできます。\n\nチュートリアルで指定する`$.results`としてもエラーになり出力結果の確認ができず。\nそもそもresultsって項目が元々ないんだが・・・　検証中\n\n\n# 入出力処理のイメージ\n入出力のパラメータについて下記の画像が関係性をわかりやすく表現している。\n![](https://storage.googleapis.com/zenn-user-upload/dd792779362e-20231006.png)\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/concepts-input-output-filtering.html\n\n",
      "body_updated_at": "2023-10-07"
    },
    {
      "author": "kat",
      "created_at": "2023-10-01",
      "body_markdown": "# Step Functions 仕組み\n## 標準ワークフロー対 Express ワークフロー\n\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/concepts-standard-vs-express.html\n\nワークフローは標準ワークフローとExpress ワークフローの２種類ある。\n\nそれぞれの特徴\n## 標準ワークフロー\n- 耐久性があり、監査可能なワークフローに最適です。\n- Step Functions API を使用して、実行完了後最大 90 日間の実行履歴をすべて取得できます。\n- ASL Retry で動作を指定しない限り、タスクとステートが複数回実行されないという 1 回限りのモデルに従います。\n- Amazon EMR クラスターの起動や支払いの処理など、非段階的なアクションの調整に適しています。\n- 処理された状態遷移の数に応じて課金されます。\n\n## Express ワークフロー\n- IoT データの取り込み、ストリーミングデータ処理と変換、モバイルアプリケーションのバックエンドなど、大容量のイベント処理ワークロードに最適です。\n- at-least-once1つの実行が複数回実行される可能性があるモデルを採用しています。\n- 入力データの変換や Amazon DynamoDB の PUT アクションによる保存など、独立したアクションのオーケストレーションに最適です。\n- 実行回数、実行時間、実行中に消費されたメモリによって請求されます。\n\n\n## ワークフローの特徴まとめ\n| 項目名 | 標準ワークフロー | エクスプレスワークフロー:同期および非同期 |\n|--------|------------------|-----------------------------------------|\n| 最大期間 | 1 年 | 5 分 |\n| サポートされている実行開始レート | リージョンによって制限値が異なる。※１ | ※１ |\n| サポートされている状態遷移レート | リージョンによって制限値が異なる。※２ | 無制限 |\n| 料金表 | 状態遷移の数によって価格設定。状態遷移は、実行のステップが完了するたびにカウント。 | 実行回数、実行時間、およびメモリ消費量によって価格設定。 |\n| 実行履歴 | 実行内容は、ステップファンクション API で一覧表示および記述。コンソールで視覚的にデバッグ可能。CloudWatchログで確認も可。 | 実行履歴は無制限。CloudWatch Logs または Step Functions コンソールで実行内容を確認可。 |\n| 実行セマンティクス　※３ | ワークフローを 1 回だけ実行。 | 非同期: t-least-onceワークフロー実行。同期: t-most-onceワークフロー実行。 |\n| サービス統合 | すべてのサービス統合とパターンをサポート。 | すべてのサービス統合をサポート。Job-run (.sync) または Callback (.waitForTaskToken) サービス統合パターンは非サポート。 |\n| Step Functions アクティビティ | サポートする。 | サポートしていない。 |\n\n\n※１・・・[API アクションのスロットリングに関連するクォータ](https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/limits-overview.html#service-limits-api-action-throttling-general)\n| API 名 | Standard - バケットサイズ | Standard - 補充レート/秒 | Express - バケットサイズ | Express - 補充レート/秒 |\n|--------|--------------------------|--------------------------|--------------------------|--------------------------|\n| StartExecution — 米国東部 (バージニア北部)、米国西部 (オレゴン)、欧州 (アイルランド) | 1,300 | 300 | 6,000 | 6,000 |\n| StartExecution — その他のすべてのリージョン | 800 | 150 | 6,000 | 6,000 |\n\n※２・・・[状態のスロットリングに関連するクォータ](https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/limits-overview.html#service-limits-api-state-throttling)\n| サービスメトリクス | Standard - バケットサイズ | Standard - 補充レート/秒 | Express - バケットサイズ | Express - 補充レート/秒 |\n|-------------------|---------------------------|--------------------------|--------------------------|--------------------------|\n| StateTransition — 米国東部 (バージニア北部)、米国西部 (オレゴン)、欧州 (アイルランド) | 5,000 | 5,000 | 無制限 | 無制限 |\n| StateTransition — その他のすべてのリージョン | 800 | 800 | 無制限 | 無制限 |\n\n※３・・・実行セマンティクス\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/express-at-least-once-execution.html\n\n- 主な違いは標準は実行中の状態を保持し、実行履歴も比較的残る。\n- エクスプレスは標準より速さに優位性があるが、その分、実行中の状態保持せず、実行履歴も残らない。\n- 実行履歴はStep Functionsでは残らないが、Cloud Watch Logsで有効化することでログは残せる。\n\n- `非能性`ってなんだ？と思ったら`Idempotency `で、冪等性のことでした。\n英語ページを翻訳すると冪等性と出ているので、翻訳はやはりGoogleの方が優秀。\n\n- `同じ名前で複数のワークフローを開始`の違いについてはよくわからない。\nおそらく同一のStep Functionsを実行中にさらに実行した際の制御だと思われる。\n標準・・・すでに動いてるならエラーにするよ。\n非同期エクスプレス・・・すでに動いていても、呼ばれたらとりあえず動かすよ。どうなるかは知らんよ。\n同期エクスプレス・・・すでに動いてたら、一旦待つよ。その後はどうするか不明。実行中のワークフローが終わった後に待機させた実行を再開させるのか、実行中のワークフローが終わった結果を待機させていたフローの結果としても返す？みたいなことなのか。（未検証）\n\n\n### 料金\n無料枠：月4,000 回の状態遷移\n※ここで言う状態遷移はワークフロー内の１つのステップの実行を指す。\n　ワークフロー内にlambda(A)の実行、次に分岐が1つ、分岐のそれぞれにlambda実行(B, C)がある全部で4ステップがあるワークフローの場合、１回のワークフロー実行によってlambda(A)、分岐、BかCどちらかのLambda実行の計3つの状態遷移を消費したことになる。\n　ワークフロー設定の不備などで途中でエラーがあった場合は、おそらく途中のステップまでの実施分までの消費になるはず。\n- 状態遷移のカウントには開始（Start）と終了（End）も含まれる。\n- エラーによるリトライやMapやParallelによる繰り返し実行も1つ1つを状態遷移としてカウント\n\n0.000025USD/以後の状態遷移ごと\n0.025USD/1,000 回の状態遷移\n意外と高い？単純なフローであれば、Lambda１本でも出来ないかなど検討する余地はある。\n\n上記は標準ワークフローの場合、\nExpress ワークフローの場合は、リクエスト数（ワークフローの実行回数）とワークフローで使用したメモリと時間によって料金が発生する。\n \nhttps://aws.amazon.com/jp/step-functions/pricing/\n\n\n## ワークフローの呼び出し\n- 標準ワークフロー内でエクスプレスワークフローを呼び出すことも可能\n\n- エクスプレスワークフロー内で標準ワークフローを呼び出すことも可能\nこの場合標準ワークフローにはエクスプレスでの制限に近い制御が加わる。\n  - ワークフローは 5 分以内に実行を完了する必要があります。\n  - ワークフローはat-least-once実行モデルになります。つまり、ワークフローの各ステップは 1 回以上実行される可能性があるということです。\n  - .waitForTaskTokenまたは.syncサービス統合パターンは使用できません。\n\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/cost-opt-exp-workflows.html\n",
      "body_updated_at": "2023-10-03"
    },
    {
      "author": "kat",
      "created_at": "2023-10-01",
      "body_markdown": "# ステート（状態）\nワークフローにおける1つの作業単位。ステップとも言う。\n\n## ステートの種類\n- タスク(Task)：ステートマシンで何らかの作業を実行します。Lambda実行など各種サービスの呼び出し。いわゆるサービス統合の定義箇所\n- 選択(Choice)：実行のブランチ間で選択を行う。いわゆる`If`文\n- 並列(Parallel)：実行の並列分岐を開始します。同じ入力で複数の異なる処理を並列で実行可能\n- マップ(Map)：ステップを動的に反復する。いわゆる`for`文。マルチスレッド的な実行も可能\n- パス(Pass)：入力を出力に渡すか、固定データをワークフローに挿入します。何もしない素通り\n- 待機(Wait)：一定時間、または指定された日時まで遅延を提供します。\n- 成功(Succeed)：成功で実行を停止する。\n- 失敗(Fail)：失敗で実行を停止する。\n\n## Amazon ステートメント言語\nステートはAmazon ステートメント言語（ASL）というJSONベースの定義言語を用いて記述します。\n同様にワークフローもASLで記述し、1つのワークフローの情報とそのワークフローに含まれるステートすべてを1つのASLとして定義します。\nIaCなどコード化する際は拡張子`.asl.json`としてjsonファイルとして保存します。\n\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/concepts-amazon-states-language.html\n\nワークフローのASLの例\n```json\n{\n  \"Comment\": \"A Hello World example of the Amazon States Language using a Pass state\",\n  \"StartAt\": \"HelloWorld\",\n  \"States\": {\n    \"HelloWorld\": {\n      \"Type\": \"Pass\",\n      \"Result\": \"Hello World!\",\n      \"End\": true\n    }\n  }\n}\n```\n`Comment`：人間が読める状態マシンの説明。\n`StartAt`（必須）：開始するステートの指定。ステートの名前を設定する。\n`TimeoutSeconds`：ステート マシンの実行が実行できる最大秒数。指定した時間を超えて実行すると、実行は失敗し、 States.Timeout エラー名 が表示されます。\n`Version`：ステートマシンで使用される Amazon States Language のバージョン (デフォルトは「1.0」)。\n`States`（必須）：カンマで区切られた一連の状態を含むオブジェクト。Statesの中に複数のステートが含まれる。\n\n## ステートの共通項\nHelloWorldというLambdaを実行するステートの例\n```\n\"HelloWorld\": {\n  \"Type\": \"Task\",\n  \"Resource\": \"arn:aws:lambda:us-east-1:123456789012:function:HelloFunction\",\n  \"Next\": \"AfterHelloWorldState\",\n  \"Comment\": \"Run the HelloWorld Lambda function\"\n}\n```\n\n`HelloWorld`(必須)\nステートの名前。任意の名前を指定可能。スペースや記号、日本語なども扱える。\n`Type`(必須)\n上記のステートの種類を指定\n`Comment`\nステートの説明文\n`Next`(必須)\n次に動作するステートを指定。Nextにどのステップを実行するかを指定していることで全体としてワークフローが作られています。\nNext または End のどちらか 1 つのみを使用できます。\n`End`(必須)\n設定されたステートがワークフローの終了状態として扱われます。\nステートマシンごとに、任意の数の終了状態が存在します。※\nNext または End のどちらか 1 つのみを使用できます。\n選択・成功・失敗などの一部のステートは、Endフィールドをサポートまたは使用しません。\n選択は分岐先のステートが`End`になるため、選択自体に`End`が付くことはありません。\n※選択を用いることでワークフロー内の複数箇所でワークフローを終了させる事が出来ます。そのため、`End`の指定はワークフローで1つとは限らないということです。\n`InputPath` (オプション)\n状態の入力の一部を選択して状態の処理タスクに渡すパス。省略した場合、入力全体を指定する値 $ が設定されます。詳細については、入力および出力処理を参照してください。\n`OutputPath` (オプション)\nステートの出力の一部を選択して次のステートに渡すパス。省略すると、$出力全体を指定する値になります。詳細については、入力および出力処理を参照してください。\n\n",
      "body_updated_at": "2023-10-01"
    },
    {
      "author": "kat",
      "created_at": "2023-10-01",
      "body_markdown": "# ステートの種類毎詳細\n## タスク(Task)\nタスクには大きく３種類\n- Lambdaの実行\n- AWSサービスの実行\n- アクティビティの実行\n\nアクティビティは、EC2やECS、モバイル端末で動作するワーカーを実行するステート\nワーカー側でStepFunctionsをポーリングし、アクティビティのステートに達したらワーカの処理結果を待機します。\nワーカー側の処理で成功か失敗を返すことで、次のステートに進みます。\nステートは`TimeoutSeconds`で指定した時間待ちます。ワーカーはこの時間内に終了できない場合は、`SendTaskHeartbeat`APIを使用することで最大１年間実行を待機させる事ができます。\n\n## 選択(Choice)\nいわゆるIf文\n条件式はプログラムで扱う一般的な条件は扱えそう。\n値としては扱えるのは\n- 数値（Number）\n- 文字列（String）\n- 日時（Timestamp）\n- 論理型（Boolean）\n- null（Null）\n\n## 選択ルール（条件式）\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/amazon-states-language-choice-state.html#amazon-states-language-choice-state-rules\n\n- 値の一致\n- 値の比較（〇〇より小さい、〇〇以下、〇〇以上、〇〇より大きい）\n- 値の型確認（数値か、文字列か、日時か、論理型か、nullか）\n- 値が存在するか\n- 値が特定のパターンにマッチするか（ワイルドカードを用いたり。\"log-*.txt\"など）\n- それぞれの条件を否定するNOTも使用可能\n- 上記の条件をANDやORで繋げた複合条件も可能\n\n※値の一致や比較は、特定の固定の値との比較だけでなく別な入力値を指定することも可能。\n\n### エラーパターン\n```\n# 型違い\nAn error occurred while executing the state 'Choice' (entered at the event id #4). Invalid path '$.firstname': The choice state's condition path references an invalid value.\n\n# 存在しない入力パラメータ\nAn error occurred while executing the state 'Choice' (entered at the event id #4). Invalid path '$.a': The choice state's condition path references an invalid value.\n\n# defaultがない\nAn error occurred while executing the state 'Choice' (entered at the event id #4). Failed to transition out of the state. The state does not point to a next state.\n※間違ってdefault消してしまうとデザイン上はエラー出ない（defaultはオプションのため文法上は合っている）default忘れずに。一応elseの選択ルールを追加することでも回避可能。\n```\n\n## 並列(Parallel)：実行の並列分岐を開始します。同じ入力で複数の異なる処理を並列で実行可能\n\n- Branches（必須）：並列に動かすステートを指定する。\n- Retry：Retrier と呼ばれるオブジェクトの配列。ステートでエラーが発生した場合のリトライ方法を定義します。\n  - リトライ回数（MaxAttempts）\n  - リトライするまでの間隔（IntervalSeconds）\n  - バックオフ率（BackoffRate）、最大待ち時間などを指定可能\n     ※バックオフはリトライする度にリトライまでの間隔を増やすこと。\n  - 最大待ち時間（MaxDelaySeconds）\n- Catch：Catcher と呼ばれるオブジェクトの配列。ステートでエラーが発生し、リトライをしても解消されない場合やリトライが定義されていない場合に実行されるフォールバック状態を定義します。\n\n![](https://storage.googleapis.com/zenn-user-upload/85baf6508bf4-20231003.png)\nキャッチャーを追加してErrorsにどのエラーをキャッチするかを決め、エラーが発生した後、次にどのステートを動かすかを指定する。のが基本的な設定方法\nErrorsはいくつか選ぶことが可能。\n- States.All\n- States.Timeout\n- States.TaskFailed\nなど。\nAllは全部拾いそうなイメージだが、他と組み合わせられるかは未確認\nフォールバック状態については改めて整理しようと思う。あと、フォールバック状態は言葉的に収まりがよいが、タスクや選択などと同様フォールバックというステートだと思われる。\n\nリトライの詳細\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/concepts-error-handling.html#error-handling-examples\nフォールバック状態の詳細\nhttps://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/concepts-error-handling.html#error-handling-fallback-states\n\n\n## マップ(Map)：ステップを動的に反復する。\nマルチスレッド的な実行\n\n基本的にはJSON配列を受け取り、配列要素を同時実行するもの。\n\n2つの処理モードをもつ\n- インラインモード\n  - 制限付き同時実行モード\n  - デフォルトはこちら\n  - 最大40個の同時実行\n- 分散モード \n  - 高同時実行モード\n  - インラインとの違いはMap内のステートが子ワークフローとして扱われる。これにより高い同時実行数を実現\n  - 子ワークフローとなるため、親ワークフローと別に実行履歴が別れる（要検証）\n  - 最大10,000個の同時実行\n  - JSON配列だけでなく、S3データソースを受け取れる\n\n同時実行数を指定できるので、1にすればいわゆるfor文的な動かし方も可能そう。\n\n以下のような制限値を超えてくる場合は分散モードを選択する。\n- データセットのサイズが 256 KB を超えています。\n- ワークフローの実行イベント履歴は 25,000 エントリを超えています。\n- 40 回を超える並列反復の同時実行が必要です。\n\nパラメータ\n- ItemProcessor：\n　処理モードなどが定義される箇所。元は`Iterator`だったようで、Step Functions Localでは`ItemProcessor`がまだ対応されていないとの記載あり。（未確認）\n- ItemSelector：\n　元は`Parameters`だったよう。\n- MaxConcurrency：同時実行数。0が最大実行数まで実行させる意味。\n- Retry：Parallelと同様\n  - リトライ発生時は失敗したものだけでなく成功したものもリトライされる点に注意。\n- Catch：Parallelと同様\n\n## パス(Pass)：入力を出力に渡すか、固定データをワークフローに挿入します。\n何もしない素通り。入力で受け取った値を出力に渡す。\n\n使い道としてはいくつかありそうです。\n- Choiceを用いた分岐において、片方のみ処理を行い、他方は何もしなくてよい場合において、処理の中で出力結果を変える場合には、何もしなくてよい場合にパスを用いて出力形式を合わせる\n- 入出力の変換を明示的に行いたい場合\n  - ステートは任意の名前をつけられるため、次のステートに渡す値を変換したい場合に専用の名前をつけてあげることで、視認性を高めることができそうです。\n- テスト用に特定の値を埋め込み後続の動作確認を行う。\n\n## 待機(Wait)：一定時間、または指定された日時まで遅延を提供します。\n２通り\n- 任意の時間を待つ。10秒待つ、１時間まつ、など\n- 指定された日時まで待つ。10月1日の0時まで待つ、など\n\nそれぞれ固定の値を指定出来るが、入力パラメータによる動的な値の指定も可能\n\n\n## 成功(Succeed)：成功で実行を停止する。\nできるのはコメント指定くらい。\n使い道としては、どでかいワークフローを作った際に途中で正常終了として終えたいが、Endの指定をするとデザインで見たときに線がゴチャゴチャしすぎて見づらい場合にわかりやすくなる。かな。\n\n## 失敗(Fail)：失敗で実行を停止する。\n成功と違い多少制御可能\nエラーに名前づけすることで、どんなエラーかを意味付けすることができます。\nエラーの内容や一緒に確認したいパラメータをエラー出力として含めることも可能。\n\nError：固定文字列の見出し\nCause：固定文字列の詳細\nErrorPath：入力パラメータを用いた見出し\nCausePath：入力パラメータを用いた詳細\n\nErrorとErrorPathはどちらか一方のみ指定可能\nCauseとCausePathもどちらか一方のみ指定可能\n",
      "body_updated_at": "2023-10-06"
    },
    {
      "author": "kat",
      "created_at": "2023-10-07",
      "body_markdown": "# パス\nASL（Amazon States Language）はJson形式のテキストで構成されています。\nJson内の値を参照する際にルートを`$`として階層はドット`.`で繋ぎます。\n\nhttps://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-paths.html\n\n## 参照パス\nJson構造内の単一ノードを識別するパスを参照パスと言います。\n\n- ドット(`.`)および角括弧(`[ ]`)表記のみを使用してオブジェクト フィールドにアクセスできます[。\n- length()などの機能はサポートされていません。\n- subsetofなどの非記号的な字句演算子はサポートされていません。\n- 正規表現によるフィルタリングや、JSON 構造内の別の値の参照によるフィルタリングはサポートされていません。\n- @フィルターで処理されている現在のノードと一致する演算子は、スカラー値と一致しません。オブジェクトのみに一致します。\n\n\n### 参照パスの使用例\n```json\n{\n  \"foo\": 123,\n  \"bar\": [\"a\", \"b\", \"c\"],\n  \"car\": {\n      \"cdr\": true\n  },\n  \"jar\": [{\"a\": 1}, {\"a\": 5}, {\"a\": 2}, {\"a\": 7}, {\"a\": 3}]\n}\n```\n次の参照パスは以下を返します。\n```\n$.foo => 123\n$.bar => [\"a\", \"b\", \"c\"]\n$.car.cdr => true\n$.jar[?(@.a >= 5)] => [{\"a\": 5}, {\"a\": 7}]\n```\n\n## 配列の配列をフラット化\nParalelやMapステートで配列の配列を返すような場合、ResltSelectorフィールドを使うことで配列をフラット配列に変換できます。\n\nResltSelectorを用いた例\n```\n\"ResultSelector\": {\n    \"flattenArray.$\": \"$[*][*]\"\n  }\n```\n\n上記の構文は、JMESPath 構文を使用しています。\nhttps://jmespath.org/specification.html#wildcard-expressions\n\nJMESPath 構文の例\n```json\nsearch([*].foo, [{\"foo\": 1}, {\"foo\": 2}, {\"foo\": 3}]) -> [1, 2, 3]\nsearch([*].foo, [{\"foo\": 1}, {\"foo\": 2}, {\"bar\": 3}]) -> [1, 2]\nsearch('*.foo', {\"a\": {\"foo\": 1}, \"b\": {\"foo\": 2}, \"c\": {\"bar\": 1}}) -> [1, 2]\n```\n"
    },
    {
      "author": "kat",
      "created_at": "2023-10-07",
      "body_markdown": "# 入出力処理\n## InputPath\n入力ペイロード一部を取得します。\n\n### 使用例１\n入力データ\n```json\n{\n  \"comment\": \"Example for InputPath.\",\n  \"dataset1\": {\n    \"val1\": 1,\n    \"val2\": 2,\n    \"val3\": 3\n  },\n  \"dataset2\": {\n    \"val1\": \"a\",\n    \"val2\": \"b\",\n    \"val3\": \"c\"\n  }\n}\n```\n\nInputPathの指定\n```json\n\"InputPath\": \"$.dataset2\",\n```\n\n結果\n```json\n{\n  \"val1\": \"a\",\n  \"val2\": \"b\",\n  \"val3\": \"c\"\n}\n```\n\n### 使用例２\n入力データ\n```json\n{ \"a\": [1, 2, 3, 4] }\n```\n\nInputPathの指定\n```json\n\"InputPath\": \"$.a[0:2]\",\n```\n\n結果\n```\n[ 1, 2 ]\n```\n",
      "body_updated_at": "2023-10-07"
    },
    {
      "author": "kat",
      "created_at": "2023-10-07",
      "body_markdown": "# 入出力処理\n## Parameters\nパラメータはキーと値のセットで新しい入力データを作り変えるイメージ\nパラメータを定義することで元の入力データを置き換えてしまうため、元の入力データを使用する場合はパラメータで元の入力データを定義しておく必要があります。\n元の入力データを使用する場合はキー名の最後は`.$`で終わる必要があります。\n\n### 使用例１\n**入力データ**\n```json\n{\n  \"comment\": \"Example for Parameters.\",\n  \"product\": {\n    \"details\": {\n       \"color\": \"blue\",\n       \"size\": \"small\",\n       \"material\": \"cotton\"\n    },\n    \"availability\": \"in stock\",\n    \"sku\": \"2317\",\n    \"cost\": \"$23\"\n  }\n}\n```\n\n**Parametersの指定**\n```json\n\"Parameters\": {\n    \"comment\": \"Selecting what I care about.\",\n    \"MyDetails\": {\n        \"size.$\": \"$.product.details.size\",\n        \"exists.$\": \"$.product.availability\",\n        \"StaticValue\": \"foo\"\n    }\n},\n```\n- `comment`は入力データにあった物を使用せず固定の値を使用しているので`.$`は不要\n- `Parameters`の下に任意の構造を定義することも可能`MyDetails`という層の下にsizeなどのキーと値を定義している\n\n**結果**\n```json\n{\n  \"comment\": \"Selecting what I care about.\",\n  \"MyDetails\": {\n      \"size\": \"small\",\n      \"exists\": \"in stock\",\n      \"StaticValue\": \"foo\"\n  }\n},\n```\n\n### 使用例２\n入力データをそのまま用いたい場合はルートを指定すれば全て取得は可能。\nParametersの仕様上キーが必要。\n\n**Parametersの指定**\n```json\n\"Parameters\": {\n    \"data.$\": \"$\"\n},\n```\n\n**結果**\n```json\n{\n  \"data\": {\n    \"comment\": \"Example for Parameters.\",\n    \"product\": {\n      \"details\": {\n        \"color\": \"blue\",\n        \"size\": \"small\",\n        \"material\": \"cotton\"\n      },\n      \"availability\": \"in stock\",\n      \"sku\": \"2317\",\n      \"cost\": \"$23\"\n    }\n  }\n}\n```\n",
      "body_updated_at": "2023-10-07"
    },
    {
      "author": "kat",
      "created_at": "2023-10-07",
      "body_markdown": "\n# 入出力処理\n## ResultSelector\n入力データを結果に含める`ResultPath`フィールドに渡すための入力データの部分を指定できます。\n使用できるのは、Task、Map、Parallesです。\n\n### 使用例１\n**元の結果**\n```json\n{\n  \"resourceType\": \"elasticmapreduce\",\n  \"resource\": \"createCluster.sync\",\n  \"output\": {\n    \"SdkHttpMetadata\": {\n      \"HttpHeaders\": {\n        \"Content-Length\": \"1112\",\n        \"Content-Type\": \"application/x-amz-JSON-1.1\",\n        \"Date\": \"Mon, 25 Nov 2019 19:41:29 GMT\",\n        \"x-amzn-RequestId\": \"1234-5678-9012\"\n      },\n      \"HttpStatusCode\": 200\n    },\n    \"SdkResponseMetadata\": {\n      \"RequestId\": \"1234-5678-9012\"\n    },\n    \"ClusterId\": \"AKIAIOSFODNN7EXAMPLE\"\n  }\n}\n```\n\n**ResultSelectorの指定**\n```json\n  \"ResultSelector\": {\n    \"ClusterId.$\": \"$.output.ClusterId\",\n    \"ResourceType.$\": \"$.resourceType\"\n  },\n  \"ResultPath\": \"$.EMROutput\",\n}\n ```\n`ResultSelector`と入力データの`ClusterId`と`resourceType`を選択しています。\nまた、`ResultPath`として`EMROutput`を指定しています。\n\n**結果**\n```json\n{\n  \"OtherDataFromInput\": {},\n  \"EMROutput\": {\n    \"ResourceType\": \"elasticmapreduce\",\n    \"ClusterId\": \"AKIAIOSFODNN7EXAMPLE\"\n  }\n}\n```\n`ResultPath`の指定の通り、`EMROutput`をキーに`ResultSelector`で選択した情報が含まれます。\n"
    },
    {
      "author": "kat",
      "created_at": "2023-10-07",
      "body_markdown": "# 入出力処理\n## Mapの入力フィールドと出力フィールド\n\nMapはデータセット内の項目のコレクションを同時に反復処理します。\n\n**データセットの例**\n- JSON 配列\n- Amazon S3 オブジェクトのリスト\n- Amazon S3 バケット内の CSV ファイルの行\nなど\n\nステートの入出力フィールドのように、Mapにはコレクションに対して下記のような入出力フィールドが存在します。\n![](https://storage.googleapis.com/zenn-user-upload/31c42e15d9cf-20231007.png)\n\n- ItemReader\n- ItemsPath\n- ItemSelector\n- ItemBatcher\n- ResultWriter\n\n"
    }
  ]
}