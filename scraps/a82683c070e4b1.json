{
  "title": "bun, nuxt, vite, quasarで環境構築",
  "closed": false,
  "archived": false,
  "created_at": "2024-07-24",
  "comments": [
    {
      "author": "kat",
      "created_at": "2024-07-27",
      "body_markdown": "## 公式\nhttps://bun.sh/docs\n\n- **bun+nuxt**\nhttps://bun.sh/guides/ecosystem/nuxt\n\n```\nbunx nuxi init my-nuxt-app\ncd my-nuxt-app\nbun --bun run dev\n```\n`--bun`を指定することでbunランタイムを使用する。指定しないとNode.jsで動作するらしい。\n\n- **bun+vite**\nhttps://bun.sh/guides/ecosystem/vite\n\n",
      "body_updated_at": "2024-09-12"
    },
    {
      "author": "kat",
      "created_at": "2024-07-27",
      "body_markdown": "以下の手順に従って、Bunを使用してNuxt 3プロジェクトを作成し、Quasarを統合し、他の指定された要素を設定します。\n\n### 1. Bunのインストール\n\nまず、Bunをインストールします。\n\n```bash\ncurl -fsSL https://bun.sh/install | bash\nsource ~/.bashrc\n```\n\n### 2. Nuxt 3プロジェクトの作成\n\nBunを使用してNuxt 3プロジェクトを作成します。\n\n```bash\nnpx nuxi init my-nuxt-app\ncd my-nuxt-app\nbun install\n```\n\n### 3. Quasarのインストール\n\nNuxt 3プロジェクトにQuasarをインストールします。\n\n```bash\nbun add quasar @quasar/extras\n```\n\n### 4. Quasarの設定\n\n次に、Quasarをプロジェクトで使用するために必要な設定を追加します。\n\n1. **`src`ディレクトリの作成**\n\n```bash\nmkdir src\n```\n\n2. **`src/quasar-variables.sass`の作成**\n\n```bash\ntouch src/quasar-variables.sass\n```\n\n```sass\n// src/quasar-variables.sass\n@import \"~quasar/src/css/variables.sass\";\n```\n\n3. **`src/quasar-user-options.js`の作成**\n\n```bash\ntouch src/quasar-user-options.js\n```\n\n```javascript\n// src/quasar-user-options.js\nimport { Quasar } from 'quasar';\nimport '@quasar/extras/material-icons/material-icons.css';\nimport 'quasar/src/css/index.sass';\n\nexport default {\n  config: {},\n  plugins: {}, // Quasar plugins go here\n};\n```\n\n4. **`nuxt.config.ts`の設定**\n\n`nuxt.config.ts`ファイルを編集し、Quasarの設定を追加します。\n\n```typescript\n// nuxt.config.ts\nimport { defineNuxtConfig } from 'nuxt';\nimport quasarPlugin from '@quasar/vite-plugin';\n\nexport default defineNuxtConfig({\n  css: ['quasar/src/css/index.sass'],\n  build: {\n    transpile: ['quasar'],\n  },\n  modules: ['@nuxt/typescript-build', '@nuxtjs/composition-api/module'],\n  vite: {\n    plugins: [\n      quasarPlugin({\n        sassVariables: 'src/quasar-variables.sass',\n      }),\n    ],\n  },\n});\n```\n\n5. **`plugins/quasar.js`の作成**\n\n`plugins`ディレクトリを作成し、その中に`quasar.js`ファイルを作成します。\n\n```bash\nmkdir plugins\ntouch plugins/quasar.js\n```\n\n```javascript\n// plugins/quasar.js\nimport { Quasar } from 'quasar';\nimport quasarUserOptions from '../src/quasar-user-options';\n\nexport default defineNuxtPlugin((nuxtApp) => {\n  nuxtApp.vueApp.use(Quasar, quasarUserOptions);\n});\n```\n\n### 5. 状態管理の設定 (Nuxt 3 Composition API)\n\nNuxt 3のComposition APIを使用して状態管理のためのファイルを作成します。\n\n```bash\nmkdir composables\ntouch composables/useExample.ts\n```\n\n```typescript\n// composables/useExample.ts\nimport { ref } from 'vue';\n\nexport function useExample() {\n  const state = ref('example');\n\n  function updateState(newState: string) {\n    state.value = newState;\n  }\n\n  return {\n    state,\n    updateState,\n  };\n}\n```\n\n### 6. OpenAPIの設定\n\nOpenAPIを使用するためのツールをインストールします。\n\n```bash\nbun add @openapitools/openapi-generator-cli\n```\n\n次に、OpenAPI Generatorを使用してAPIクライアントを生成します。\n\n```bash\nbun openapi-generator-cli generate -i /path/to/your/openapi.yaml -g typescript-fetch -o ./src/api\n```\n\n### 7. HTTPクライアントの設定 (fetch)\n\nfetchを使用してHTTPクライアントを設定します。ここでは特に追加のインストールは不要です。API呼び出しを行うためのコードを作成します。\n\n```typescript\n// composables/useApi.ts\nexport function useApi() {\n  const fetchData = async (endpoint: string) => {\n    const response = await fetch(endpoint);\n    return response.json();\n  };\n\n  return {\n    fetchData,\n  };\n}\n```\n\n### 8. レスポンシブのグリッドシステムの設定\n\nQuasarのレスポンシブグリッドシステムを使用します。Quasarはすでにインストールされているので、Quasarのスタイルをインポートします。\n\n### 9. プロジェクトのビルドとデプロイ\n\nNuxt 3プロジェクトをビルドし、Bunを使ってデプロイします。\n\n```bash\nbun run build\nbun run start\n```\n\nこれで、Vue 3、Nuxt 3、Quasar 3、Composition API、OpenAPI、fetch、レスポンシブグリッドシステムを組み合わせた開発環境が構築され、Bunで管理されるようになります。必要に応じて各ツールやライブラリの公式ドキュメントを参照し、詳細な設定やカスタマイズを行ってください。"
    },
    {
      "author": "kat",
      "created_at": "2024-07-27",
      "body_markdown": "## 2. Nuxt 3プロジェクトの作成\n\n```shell\nnpx nuxi init my-nuxt-app\n✔ Which package manager would you like to use?\n○ npm\n○ pnpm\n○ yarn\n○ bun\n\n※※※　bunを選択　※※※\n\n◐ Installing dependencies...                                                                                                                          12:47:29\nbun install v1.1.20 (ae194892)\n\n$ nuxt prepare\n✔ Types generated in .nuxt                                                                                                                           12:47:38\n\n+ nuxt@3.12.4\n+ vue@3.4.34\n\n610 packages installed [8.88s]\n✔ Installation completed.                                                                                                                            12:47:38\n\n✔ Initialize git repository?\n● Yes / ○ No\n\n※※※　Yesを選択　※※※\nYes\n\nℹ Initializing git repository...                                                                                                                     12:48:44\n\nhint: Using 'master' as the name for the initial branch. This default branch name\nhint: is subject to change. To configure the initial branch name to use in all\nhint: of your new repositories, which will suppress this warning, call:\nhint: \nhint:   git config --global init.defaultBranch <name>\nhint: \nhint: Names commonly chosen instead of 'master' are 'main', 'trunk' and\nhint: 'development'. The just-created branch can be renamed via this command:\nhint: \nhint:   git branch -m <name>\nInitialized empty Git repository in /path/to/app/my-nuxt-app/.git/\n                                                                                                                                                      12:48:44\n✨ Nuxt project has been created with the v3 template. Next steps:\n › cd my-nuxt-app                                                                                                                                         12:48:44\n › Start development server with bun run dev\n```",
      "body_updated_at": "2024-07-27"
    },
    {
      "author": "kat",
      "created_at": "2024-07-27",
      "body_markdown": "## 3. Quasarのインストール\n```shell\nbun add quasar @quasar/extras                 \nbun add v1.1.20 (ae194892)\n\n$ nuxt prepare\n✔ Types generated in .nuxt                                                                                                                           12:54:36\n\ninstalled quasar@2.16.6\ninstalled @quasar/extras@1.16.12\n\n2 packages installed [1.65s]\n```"
    },
    {
      "author": "kat",
      "created_at": "2024-07-27",
      "body_markdown": "## 4. Quasarの設定\n-  4. nuxt.config.tsの設定でエラー\n```ts\n// plugins/quasar.js\nimport { Quasar } from 'quasar';\nimport quasarUserOptions from '../src/quasar-user-options';\n```\n**エラー内容**\n```\nモジュール 'nuxt' にエクスポートされたメンバー 'defineNuxtConfig' がありません。\nモジュール '@quasar/vite-plugin' またはそれに対応する型宣言が見つかりません。\n```\n\n`bun add @quasar/vite-plugin`してみるも、それもエラー\n```shell\nbun add v1.1.20 (ae194892)\n\n$ nuxt prepare\n\n WARN  The CJS build of Vite's Node API is deprecated. See https://vitejs.dev/guide/troubleshooting.html#vite-cjs-node-api-deprecated for more details.                         13:11:09\n\n\n ERROR  (0 , _vitePlugin.default) is not a function                                                                                                                             13:11:09\n\n  at nuxt.config.ts:15:29\n  at evalModule (node_modules/jiti/dist/jiti.js:1:247313)\n  at Object.jiti (node_modules/jiti/dist/jiti.js:1:245241)\n  at resolveConfig (node_modules/c12/dist/shared/c12.cab0c9da.mjs:345:26)\n  at loadConfig (node_modules/c12/dist/shared/c12.cab0c9da.mjs:147:29)\n  at async loadNuxtConfig (node_modules/@nuxt/kit/dist/index.mjs:2587:18)\n  at async loadNuxt (node_modules/nuxt/dist/index.mjs:4594:19)\n  at async loadNuxt (node_modules/@nuxt/kit/dist/index.mjs:2650:19)\n  at async Object.run (node_modules/nuxi/dist/chunks/prepare.mjs:56:18)\n  at async runCommand$1 (node_modules/nuxi/dist/shared/nuxi.6aad497e.mjs:1648:16) \n\n\n\n ERROR  (0 , _vitePlugin.default) is not a function                                                                                                                             13:11:09\n\nerror: postinstall script from \"nuxt-app\" exited with 1\n```\n\n```shell\nrm -rf node_modules bun.lockb\nbun install\n\nbun add @quasar/vite-plugin\n```\n\n結果変わらず。\n\n`nuxt.config.ts`の記述がいまいちぽい。\n所々削って`bun install`できたのは以下の設定\n```ts\nimport { quasar } from '@quasar/vite-plugin';\n\nexport default defineNuxtConfig({\n  compatibilityDate: '2024-04-03',\n  devtools: { enabled: true },\n  css: ['quasar/src/css/index.sass'],\n  build: {\n    transpile: ['quasar']\n  },\n  vite: {\n    plugins: [\n      quasar({\n        sassVariables: 'src/quasar-variables.sass'\n      })\n    ]\n  }\n});\n```\n\n## 5.plugins/quasar.jsの作成\n- tsファイルに変更\n- quasar-variables.sassのオプション指定がnuxt.config.tsの設定と被ってエラーになったので除去\n\n```ts:plugins/quasar.ts\n// plugins/quasar.ts\nimport { Quasar } from 'quasar';\n\nexport default defineNuxtPlugin((nuxtApp) => {\n  nuxtApp.vueApp.use(Quasar, {\n    plugins: {}\n  });\n});\n```\n**quasar.ts\n\n## 動作した版\n- **nuxt.confg**\n```ts:nuxt.config.ts\nimport { defineNuxtConfig } from 'nuxt/config';\nimport { quasar } from '@quasar/vite-plugin';\n\n// https://nuxt.com/docs/api/configuration/nuxt-config\nexport default defineNuxtConfig({\n  compatibilityDate: '2024-07-28',\n  devtools: { enabled: true },\n  ssr: false,\n  srcDir: 'src/',\n  css: [\n    '@quasar/extras/material-icons/material-icons.css',\n    '@quasar/extras/material-icons-outlined/material-icons-outlined.css',\n    '~/assets/styles/quasar.sass'\n  ],\n  build: {\n    transpile: ['quasar']\n  },\n  vite: {\n    plugins: [\n      quasar({\n        sassVariables: 'assets/styles/quasar-variables.sass'\n      })\n    ],\n    css: {\n      preprocessorOptions: {\n        sass: {\n          additionalData: '@import \"@/assets/styles/quasar-variables.sass\"\\n'\n        }\n      }\n    }\n  }\n});\n```\n\n- **app.vue**\nnuxtのレイアウトを使うように\n```vue:app.vue\n<template>\n  <NuxtLayout>\n    <NuxtPage />\n  </NuxtLayout>\n</template>\n```\n\n- **レイアウト**\nquasarのビルダーで生成したヘッダーと左サイドバーのあるレイアウト\nhttps://quasar.dev/layout-builder\n\n```vue:src/layouts/default.vue\n<template>\n  <q-layout view=\"hHh lpR fFf\">\n    <q-header elevated class=\"bg-primary text-white\">\n      <q-toolbar>\n        <q-btn dense flat round icon=\"menu\" @click=\"toggleLeftDrawer\" />\n\n        <q-toolbar-title>\n          <q-avatar>\n            <img src=\"https://cdn.quasar.dev/logo-v2/svg/logo-mono-white.svg\" />\n          </q-avatar>\n          Title\n        </q-toolbar-title>\n      </q-toolbar>\n    </q-header>\n\n    <q-drawer show-if-above v-model=\"leftDrawerOpen\" side=\"left\" bordered>\n      <!-- drawer content -->\n    </q-drawer>\n\n    <q-page-container>\n      <router-view />\n    </q-page-container>\n  </q-layout>\n</template>\n\n<script>\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const leftDrawerOpen = ref(false);\n\n    return {\n      leftDrawerOpen,\n      toggleLeftDrawer() {\n        leftDrawerOpen.value = !leftDrawerOpen.value;\n      }\n    };\n  }\n};\n</script>\n```\n\n- **index.vue**\n適当に\n```vue:index.vue\n<template>\n  <q-page class=\"q-pa-md\">\n    <q-card>\n      <q-card-section>\n        <div class=\"text-h6\">Welcome to Quasar with Nuxt</div>\n        <p>This is a test page to confirm Quasar is working with Nuxt.</p>\n      </q-card-section>\n      <q-card-actions align=\"right\">\n        <q-btn flat label=\"Primary Action\" color=\"primary\" />\n      </q-card-actions>\n    </q-card>\n  </q-page>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\n</script>\n```\n\n- **package.json**\n```json:package.json\n{\n  \"name\": \"nuxt-app\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"nuxt build\",\n    \"dev\": \"nuxt dev\",\n    \"devo\": \"bun -b run dev -o --hot\",\n    \"generate\": \"nuxt generate\",\n    \"preview\": \"nuxt preview\",\n    \"postinstall\": \"nuxt prepare\",\n    \"reinstall\": \"rm -rf node_modules && rm -f bun.lockb && bun install\"\n  },\n  \"dependencies\": {\n    \"@openapitools/openapi-generator-cli\": \"^2.13.4\",\n    \"@quasar/extras\": \"^1.16.12\",\n    \"@quasar/vite-plugin\": \"^1.7.0\",\n    \"nuxt\": \"^3.12.4\",\n    \"quasar\": \"^2.16.6\",\n    \"vue\": \"latest\"\n  },\n  \"devDependencies\": {\n    \"sass\": \"^1.77.8\",\n    \"typescript\": \"^5.5.4\"\n  }\n}\n```\n\n以下は、nuxtのプロジェクト作りたてのpackage.json\nこの差分が追加したもの。\n```json:\n{\n  \"name\": \"nuxt-app\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"nuxt build\",\n    \"dev\": \"nuxt dev\",\n    \"generate\": \"nuxt generate\",\n    \"preview\": \"nuxt preview\",\n    \"postinstall\": \"nuxt prepare\"\n  },\n  \"dependencies\": {\n    \"nuxt\": \"^3.12.4\",\n    \"vue\": \"latest\"\n  }\n}\n```",
      "body_updated_at": "2024-07-28"
    },
    {
      "author": "kat",
      "created_at": "2024-07-28",
      "body_markdown": "## ディレクトリ構成\n\n設定周りを残して、nuxtの実装はsrc下に置くようにした。※1\n\n```\n├── README.md\n├── bun.lockb\n├── nuxt.config.ts\n├── package.json\n├── src\n│   ├── app.vue\n│   ├── assets\n│   │   └── styles\n│   │       ├── quasar-variables.css\n│   │       ├── quasar-variables.css.map\n│   │       ├── quasar-variables.sass\n│   │       └── quasar.sass\n│   ├── components\n│   ├── composables\n│   │   └── useExample.ts\n│   ├── layouts\n│   │   └── default.vue\n│   ├── pages\n│   │   ├── about.vue\n│   │   └── index.vue\n│   ├── plugins\n│   │   └── quasar.ts\n│   ├── public\n│   │   └── favicon.ico\n│   └── server\n│       └── tsconfig.json\n└── tsconfig.json\n```\n\n\n※1・・・`nuxt.config.ts`の設定にて\n```\nexport default defineNuxtConfig({\n・・・\n  srcDir: 'src/',\n・・・\n});\n```\n"
    },
    {
      "author": "kat",
      "created_at": "2024-07-28",
      "body_markdown": "![](https://storage.googleapis.com/zenn-user-upload/88390d372fac-20240728.png)"
    }
  ]
}